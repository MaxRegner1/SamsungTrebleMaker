# This is a basic workflow to help you get started with Actions

name: Treble Creator

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      device:
        description: "Device Model Number"
        required: True
        type: choice
        options:
          - Motorola Moto One Action
      region:
        description: "Device Region"
        required: true
        type: choice
        options:
          - BTU
      arch:
        description: "Device Architecture"
        default: "arm64"
        type: choice
        options:
          - arm64
          - arm32
      apps:
        description: "Preinstalled Applications"
        type: choice
        options:
          - floss
          - gapps
          - gogapps
          - vanilla
      vndklite:
        description: "Vndklite ROM or not"
        type: boolean
      secure:
        description: "Secure ROM or not"
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  urlfinder:
    runs-on: ubuntu-latest
    outputs:
      jobinfo: ${{ steps.get-url.outputs.finalurl }}
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" 
            
      - name: Generate URL
        id: get-url
        shell: python
        run: |
            import os

            env_file = os.getenv('GITHUB_ENV')


            url = {}
            apps = "${{ github.event.inputs.apps }}"
            arch = "${{ github.event.inputs.arch }}"
            vndklite = "${{ github.events.inputs.vndklite }}"
            secure = "${{ github.events.inputs.secure }}"
            
            match apps:
              case "gapps":
                appTest = 'select(.name | test(\\"gapps\")) | select(.name | test(\"gogapps\") | not) |';
              case "gogapps":
                appTest = 'select(.name | test(\"gogapps\")) |';
              case "floss":
                appTest = 'select(.name | test(\"floss\")) |';
              case _:
                appTest = 'select(.name | test(\"vanilla\"))';
            
            
            match arch:
              case "arm32":
                archTest = 'select(.name | test(\"arm32_binder64\")) |';
                match apps:
                  case "gapps":
                    appTest = 'select(.name | test(\"gogapps\")) |';
                  case "gogapps":
                    appTest = 'select(.name | test(\"gogapps\")) |';
                  case _:
                    appTest = 'select(.name | test(\"vanilla\")) |';
              case _:
                archTest = 'select(.name | test(\"arm64\")) |';
            
            match vndklite:
              case "true":
                vndkliteTest = 'select(.name | test(\"vndklite\")) |';
              case _:
                vndkliteTest = 'select(.name | test(\"vndklite\") | not) |';
            
            match secure:
              case "true":
                secureTest = 'select(.name | test(\"secure\")) |';
                vndkliteTest = 'select(.name | test(\"vndklite\")) |';
              case _:
                secureTest = 'select(.name | test(\"secure\") | not) |';
            
            finalurlquery = f".assets[] | {appTest} {archTest} {vndkliteTest} {secureTest} .browser_download_url";
            with open(env_file, "a") as g:
              print(f"URL_QUERY={finalurlquery}\n")
              g.write(f"URL_QUERY={finalurlquery}\n")
                
    
  build:
    runs-on: ubuntu-20.04
    needs: urlfinder
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" 
            
      - name: Generate URL
        id: get-url
        shell: python
        run: |
            import os

            env_file = os.getenv('GITHUB_ENV')


            url = {}
            apps = "${{ github.event.inputs.apps }}"
            arch = "${{ github.event.inputs.arch }}"
            vndklite = "${{ github.events.inputs.vndklite }}"
            secure = "${{ github.events.inputs.secure }}"
            
            match apps:
              case "gapps":
                appTest = 'select(.name | test(\\"gapps\\")) | select(.name | test(\\"gogapps\\") | not) |';
              case "gogapps":
                appTest = 'select(.name | test(\\"gogapps\\")) |';
              case "floss":
                appTest = 'select(.name | test(\\"floss\\")) |';
              case _:
                appTest = 'select(.name | test(\\"vanilla\\"))';
            
            
            match arch:
              case "arm32":
                archTest = 'select(.name | test(\\"arm32_binder64\\")) |';
                match apps:
                  case "gapps":
                    appTest = 'select(.name | test(\\"gogapps\\")) |';
                  case "gogapps":
                    appTest = 'select(.name | test(\\"gogapps\\")) |';
                  case _:
                    appTest = 'select(.name | test(\\"vanilla\\")) |';
              case _:
                archTest = 'select(.name | test(\\"arm64\\")) |';
            
            match vndklite:
              case "true":
                vndkliteTest = 'select(.name | test(\\"vndklite\\")) |';
              case _:
                vndkliteTest = 'select(.name | test(\\"vndklite\\") | not) |';
            
            match secure:
              case "true":
                secureTest = 'select(.name | test(\\"secure\\")) |';
                vndkliteTest = 'select(.name | test(\\"vndklite\\")) |';
              case _:
                secureTest = 'select(.name | test(\\"secure\\") | not) |';
            
            finalurlquery = f".assets[] | {appTest} {archTest} {vndkliteTest} {secureTest} .browser_download_url";
            with open(env_file, "a") as g:
              print(f"URL_QUERY={finalurlquery}\n")
              g.write(f"URL_QUERY={finalurlquery}\n")

      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Add OTATools PATH Environment
        run: |
          export PATH=$PATH:/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/
          echo "/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          sudo apt-get install simg2img lz4 unzip jq p7zip-full
          pip3 install git+https://github.com/samloader/samloader.git
          echo $GITHUB_WORKSPACE
          echo ${{ github.event.inputs.device }}
          echo ${{ github.event.inputs.region }}
      
      - name: download firmware 
      run: |
      wget https://mirrors.lolinet.com/firmware/motorola/troika/official/AMXBR/XT2013-1_TROIKA_RETEU_RS_11_RSBS31.Q1-48-36-26_subsidy-DEFAULT_regulatory-DEFAULT_CFC.xml.zip
      7z x XT2013-1_TROIKA_RETEU_RS_11_RSBS31.Q1-48-36-26_subsidy-DEFAULT_regulatory-DEFAULT_CFC.xml.zip


      
      - name: Replace old system image and measure size of partitions
        id: imageSizes
        run: |
          VENDOR_SIZE=$(stat -c '%s' vendor.img)

          
          echo $VENDOR_SIZE
          
          echo "::set-output name=ODM_PARTITION_SIZE::$ODM_SIZE"
          echo "::set-output name=PRODUCT_PARTITION_SIZE::$PRODUCT_SIZE"
          echo "::set-output name=SYSTEM_PARTITION_SIZE::$SYSTEM_SIZE"
          echo "::set-output name=VENDOR_PARTITION_SIZE::$VENDOR_SIZE"
        
      - name: Get Image Sizes
        shell: python
        run: |
          import subprocess
          import os

          odmSize = int(subprocess.run(['stat', '-c', "'%s'", 'APFiles/APExtracted/superImageFiles/odm.img'], stdout=subprocess.PIPE).stdout.decode('utf-8').replace("'", ''))
          systemSize = int(subprocess.run(['stat', '-c', "'%s'", 'APFiles/APExtracted/superImageFiles/system.img'], stdout=subprocess.PIPE).stdout.decode('utf-8').replace("'", ''))
          productSize = int(subprocess.run(['stat', '-c', "'%s'", 'APFiles/APExtracted/superImageFiles/product.img'], stdout=subprocess.PIPE).stdout.decode('utf-8').replace("'", ''))
          vendorSize = int(subprocess.run(['stat', '-c', "'%s'", 'APFiles/APExtracted/superImageFiles/vendor.img'], stdout=subprocess.PIPE).stdout.decode('utf-8').replace("'", ''))

          totalSize = odmSize + systemSize + productSize + vendorSize
          env_file = os.getenv('GITHUB_ENV')

          with open(env_file, "a") as g:
              g.write(f"TOTAL_SIZE={totalSize}\n")
      
      - name: Clear Space
        run: |
          cd APFiles/APExtracted
          ls -l
          rm *.img.lz4 --verbose
          
          
      - name: Create New Super Image
        id: superImage
        run: |
          mkdir ./output
          echo ${{ steps.superImageSize.outputs.ORIGINAL_SUPER_IMAGE_SIZE }}
          lpmake --metadata-size 65536 \
          --super-name super \
          --metadata-slots 2 \
          --device super:${{ steps.superImageSize.outputs.ORIGINAL_SUPER_IMAGE_SIZE }} \
          --group main:${{ env.TOTAL_SIZE }} \
          --partition odm:readonly:${{ steps.imageSizes.outputs.ODM_PARTITION_SIZE }}:main \
          --partition vendor:readonly:${{ steps.imageSizes.outputs.VENDOR_PARTITION_SIZE }}:main \
          --image vendor=./vendor.img \
          --sparse \
          --output ./output/super_new.img
          
      - name: Test Super Output
        run: |
          cd APFiles/APExtracted/superImageFiles/output
          lz4 -B6 --content-size super_new.img super.img.lz4
          ls -l
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: super_image
          path: APFiles/APExtracted/superImageFiles/output/super.img.lz4
        
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.3
        with:
          # The token used to authenticate.
          token: ${{ github.token }}
          # The name of the repository.
          repository:  ${{ github.repository }}
          # The number of days.
          retain_days: 0
          # The minimum runs to keep for each workflow.
          keep_minimum_runs: 0
  
  compileFiles:
    runs-on: windows-latest
    needs: build
    steps:
       - name: Checkout Repository
         uses: actions/checkout@v3
         
       - name: Check working directory and files
         run: |
           pwd
           ls
         
       - name: Set up Python ${{ matrix.python-version }}
         uses: actions/setup-python@v4
         with:
          python-version: "3.10"
      
       - name: Build new AP File
         run: |
          cd tar-md5-script-tool
          ./batch.bat
        
       - name: Upload AP Files
         uses: actions/upload-artifact@v3.1.0
         with:
           name: Final AP File
           path: D:\a\SamsungTrebleMaker\SamsungTrebleMaker\tar-md5-script-tool/temp-folder
        
       - uses: joutvhu/delete-artifact@v1
         with:
           name: |
            AP_Files
            super_image
        
          


